Part 1: minimizing the number of characters in requestanimframe.js by moving the code from escapejs_modified.js to requestanimframe.js, so animation happens smoothly. This is achieved by cutting all code from the parse function to requestanimframe.js. Currently, the parse function gets called just once and that makes displaying the ansi file show up too fast. This means you must call functions from escapejs from requestanimframe.js. The expected result is a properly parsed ANSI file, not like demonstrated in the video, which shows a chunked ANSI file.
Part 2: After that, allow parsing of the 256 color ANSI file. Add support for the escape codes 38 and 48. See here: https://github.com/broadinstitute/xtermcolor/raw/master/img/list.png - Change the color according to the value after the 5; (I think), so the 256 color ANSI file shows up properly.
3rd, create another ANSI file with foreground and color changes and replace the values after 5 through random r;g;b values. You might create a new ANSI file for example with Pablo draw (http://picoe.ca/products/pablodraw/). After creating text with foreground and background color changes, replace the color codes through R G B Values. (http://i.imgur.com/u8PXJXU.png)
If you encounter them, use the function https://github.com/TooTallNate/ansi.js top calculate the correct color code using the function rgb from inside it, or use the information which is provided here: http://stackoverflow.com/questions/27159322/rgb-values-of-the-colors-in-the-ansi-extended-colors-index-17-255 

to summarize, 1st counting on every call of requestanimframe just a few characters up and make sure the draw function in escapejs_modified gets called properly. 2nd, implement getting the value from 38;5;n and 48;5;n - 3rd, create a new ansi file with a lot of colors using an ansi editor (see link), and modify it so it has r;g;b values as also shown in , then make sure that this file also gets parsed correctly by calculating the real color code from the r;g;b values.